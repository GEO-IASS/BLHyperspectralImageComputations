function RunExperiment

    setPrefsForHyperspectralImageIsetbioComputations();
    
    decoderParams = struct(...
        'type', 'optimalLinearFilter', ...
        'thresholdConeSeparationForInclusionInDecoder', 0, ...      % 0 to include all cones
        'stimulusSpatialSamplingWithinSensorFOV', [20 20], ...
        'temporalSamplingInMilliseconds', 10, ...
        'latencyInMillseconds', -200, ...
        'memoryInMilliseconds', 600, ...
        'sceneResamplingInRetinalMicrons', 1.0, ...
        'extraMicronsAroundSensorBorder', 10 ...
    );

    isetbioTimeStepInMilliseconds = 0.1;
    integrationTimeInMilliseconds = 50;
    
    % sensor params for scene viewing
    sensorParams = struct(...
        'coneApertureInMicrons', 3.0, ...        
        'LMSdensities', [0.6 0.3 0.1], ...        
        'spatialGrid', [20 20], ...  
        'opticalImageResamplingInRetinalMicrons', 1.0, ...
        'samplingIntervalInMilliseconds', isetbioTimeStepInMilliseconds, ...  
        'integrationTimeInMilliseconds', integrationTimeInMilliseconds, ...
        'randomSeed',  1552784, ...                                                % fix this to ensure repeatable results
        'eyeMovementScanningParams', struct(...
            'samplingIntervalInMilliseconds', isetbioTimeStepInMilliseconds, ...
            'meanFixationDurationInMilliseconds', 200, ...
            'stDevFixationDurationInMilliseconds', 20, ...
            'fixationOverlapFactor', 1.0, ...     
            'saccadicScanMode',  'randomized' ...                                  % 'randomized' or 'sequential', to visit eye position grid sequentially
        ) ...
    );

    % sensor params for adapting field viewing (differs from scene sensor only in fixation params)
    sensorAdaptingFieldParams = sensorParams;
    % 400 msec viewing in order for the outer segment response to return to baseline
    sensorAdaptingFieldParams.eyeMovementScanningParams.meanFixationDurationInMilliseconds = 400;
    sensorAdaptingFieldParams.eyeMovementScanningParams.stDevFixationDurationInMilliseconds = 0;
    sensorAdaptingFieldParams.eyeMovementScanningParams.fixationOverlapFactor = 0;
    
    outerSegmentParams = struct(...
        'type', '@osBiophys', ...                       % choose between '@osBiophys' and '@osLinear'
        'noise', true ...
    );
    
    adaptingFieldParams = struct(...
        'type', 'SpecifiedReflectanceIlluminatedBySpecifiedIlluminant', ...
        'surfaceReflectance', struct(...
                                'type', 'MacBethPatchNo', ...
                                'patchNo', 16 ...
                            ), ...
        'illuminantName', 'D65', ...
        'meanLuminance', 200 ...
    );
    
    viewModeParams = struct(...
        'fixationsPerScan', 20, ...                                             % each scan file will contains this many fixations
        'consecutiveSceneFixationsBetweenAdaptingFieldPresentation', 1, ...     % usually either 1 or 20
        'adaptingFieldParams', adaptingFieldParams, ...
        'forcedSceneMeanLuminance', 200 ...
    );
    
    expParams = struct(...
        'sceneSetName', 'manchester', ...
        'viewModeParams', viewModeParams, ...
        'sensorParams', sensorParams, ...
        'sensorAdaptingFieldParams', sensorAdaptingFieldParams, ...
        'outerSegmentParams', outerSegmentParams, ...
        'decoderParams', decoderParams ...
    );
        
    % What to compute
    instructionSet = {'compute outer segment responses', 'assembleTrainingDataSet'};
   
    for instrIndex = 1:numel(instructionSet)  
       switch (instructionSet{instrIndex})
            case 'compute outer segment responses'
                core.computeOuterSegmentResponses(expParams);
               
            case 'assembleTrainingDataSet'
                core.assembleTrainingSet(expParams);
               
           otherwise
                error('Unknown instruction: ''%s''.\n', instructionSet{instrIndex});
        end   
    end % instrIndex
end

