function [imageCMF, clippedPixelsNum] = imageFromScene(scene, CMFname, varargin)

    % parse input
    defaultMaxLuminance = [];
    p = inputParser;
    p.addRequired('scene', @isstruct);
    p.addRequired('CMFname', @ischar);
    p.addParamValue('maxLuminance', defaultMaxLuminance, @isnumeric);
    p.parse(scene, CMFname, varargin{:});
    
    switch CMFname
        case 'LMS'
            CMF = loadStockmanSharpe2DegFundamentals();
        case 'XYZ'
            CMF = loadXYZCMFs();
        case 'sRGB'
            CMF = loadXYZCMFs();
    end
    
    S = WlsToS(sceneGet(scene, 'wave'));
    radiance = sceneGet(scene, 'energy');
    imageCMF = MultispectralToSensorImage(radiance, S, CMF.T, CMF.S); 
    
    clippedPixelsNum = [];
    
    if (strcmp(CMFname, 'sRGB'))
        [imageCMF, clippedPixelsNum] = core.XYZtoSRGB(p.Results.maxLuminance)
        [tmp, nCols, mRows] = ImageToCalFormat(imageCMF);
        if (~isempty(p.Results.maxLuminance))
            % clip luminance
            xyY = XYZToxyY(tmp);
            luma = 683*squeeze(xyY(3,:));
            indices = find(luma>p.Results.maxLuminance);
            luma(indices) = p.Results.maxLuminance;
            clippedPixelsNum = numel(indices);
            xyY(3,:) = luma/683;
            tmp = xyYToXYZ(xyY);
        end
        
        tmp = XYZToSRGBPrimary(tmp);
        imageCMF = CalFormatToImage(tmp, nCols, mRows);
    end
    
end

function sensorLMS = loadStockmanSharpe2DegFundamentals()
    d = load('T_cones_ss2.mat');
    sensorLMS.S = d.S_cones_ss2;
    sensorLMS.T = d.T_cones_ss2;
end

function sensorXYZ = loadXYZCMFs()
    d = load('T_xyz1931.mat');
    sensorXYZ.S = d.S_xyz1931;
    sensorXYZ.T = d.T_xyz1931;
end



